type ICPTs = 
  record {
     e8s : nat64;
  };

type ConfigResponse = 
  record {
    purchase_price: opt ICPTs;
    transfer_price: opt ICPTs;
  };

type ResolveRecordResponse =
  record {
    address: opt text;
  };

type TransferReceipt = 
  variant {
    Err: TransferErr;
    Ok: ResolveRecordResponse;
  };

type RegisterReceipt = 
  variant {
    Err: RegisterErr;
    Ok: ResolveRecordResponse;
  };

type RegisterErr = 
  variant {
    NotAllowed;
    InsufficientTokens;
  };

type TransferErr = 
  variant {
    NotAllowed;
    NotExistingDomain;
    InsufficientTokens;
  };

type Subaccount = blob;

type Account = 
  record {
    owner : principal;
    subaccount : opt Subaccount;
  };

type Record = 
  record {
    owner : principal;
    registered_name : text;
  };

type InitArgs = 
  record {
    transfer_fee : opt ICPTs;
    purchase_fee : opt ICPTs;
    // project_account : Account;
    name_records : opt vec Record;
  };

service : (InitArgs) -> {
    "config": () -> (ConfigResponse) query;
    "resolve_record": (text) -> (ResolveRecordResponse) query;
    "register": (text) -> (RegisterReceipt);
    "transfer": (text, principal) -> (TransferReceipt);
}
